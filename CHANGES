Changes for 3.1.0:

* New feature: Support for generating C code.
* Fixed issue #29: Create arguments to filter files found with '--dir' argument.
* Fixed issue #53: Generate only C code.
* Fixed issue #63: Context class redesign. Move arguments handling into a Context class.
* Fixed issue #64: Remove build artifacts of samples from installation packages.
* Fixed issue #72: Move the code FileManager class generation code into its own IGenerator implementation.
* Fixed issue #74: Invalid generated output file name: index.cpptml.cpp.
* Fixed issue #77: Refactor generating code to use full file templates with markers.


Changes for 3.0.1:

* Fixed issue #68: Update to RapidAssist version 0.11.0


Changes for 3.0.0:

Note: This version introduces breaking changes. The public API has changed. See notes about automatic identifiers and deprecated method `getFilename()`.
* New feature: Using RapidAssist version 0.10.2
* New feature: Modified how automatic identifier are generated. New identifiers now includes the file extension. Existing code that uses bin2cpp generated files may not compile anymore.
* New feature: Deprecated method `getFilename()` in favor to `getFileName()`. This is to be more inline with getFilePath().
* New feature: Calls to FileManager::saveFiles() is now saving all files as the original input directories.
* Fixed issue #51: Support getfilePath api and handle same function identifier.
* Fixed issue #52: Generate only c++ code.
* Fixed issue #54: Output the encoded string in plain format to stdout.
* Fixed issue #56: Problem with certain filenames.
* Fixed issue #59: Silence warning C4996 about deprecated 'std::tr1' namespace - Windows only.
* Fixed issue #58: Mandatory options `--identifier` and `--headerfile` should be calculated automatically if not specified.


Changes for 2.5.0:

* New feature: Using RapidAssist version 0.10.1
* Fixed issue #55: Support for large files.


Changes for 2.4.0:

* New feature: Using RapidAssist version 0.10.0
* Fixed issue #32: Add pre-build linux binaries.
* Fixed issue #34: Support for macOS.
* Fixed issue #35: Migrate CI/CD services to GitHub Actions.
* Fixed issue #36: Simplify building process with scripts and INSTALL documentation.
* Fixed issue #38: Github don't identify the repository LICENSE as MIT.
* Fixed issue #39: Uniformalize function argument names. Remove i and o prefix from argument names.
* Fixed issue #40: Remove duplicated code that is now available in RapidAssit.
* Fixed issue #41: All the small things.
* Fixed issue #42: Function getIdentifier does not remove special characters.
* Fixed issue #43: Replace icons of sample project.
* Fixed issue #44: Using .hpp for header filename causes .cpppp for source file.
* Fixed issue #47: Allow generating into subfolder.
* Fixed issue #48: Disable steps that requires secrets in GitHub Action workflows.
* Fixed issue #50: Change File and FileManager macro guards prefix according to specified namespace.


Changes for 2.3.0:

* New feature: Using RapidAssist version 0.8.1
* Fixed issue #28: FileManager class for iterating through all embeded files.
* Fixed issue #30: Visual Studio: warning C4996: 'fopen': This function or variable may be unsafe.


Changes for 2.2.0:

* Fixed issue  #9: bin2cpp on Linux.
* Fixed issue #18: Implement a --dir=value argument to add all files of a directory.
* Fixed issue #24: License copy in all source and include files.
* Fixed issue #25: Resource identifier for win32 generator.
* Fixed issue #26: Relative path in resource files generated by win32 generator.
* Fixed issue #27: Application icon.
* New feature: Generators generate files with appropriate include guard. Removed all `#pragma once` statements in the code.


Changes for 2.1.0:

* New feature (issue #6): Implement Windows support using resource file and Windows API for getting resources.


Changes for 2.0.0:

* New feature (issue #2): Update command line parameters syntax with the --name=value syntax
* New feature: Command line --noheader to not display the application header in the console output.
* New feature: Command line --quiet to not output any message to standard output.
* New feature: Command line --baseclass to change the default name of the interface which is File
* Fixed issue  #5: Remove the concept of segment
* Fixed issue #14: Allow generated code to only use octal representation for non-printable characters
* Fixed issue #16: Implement a --namespace argument
* Fixed issue #17: Implement a --help and --h
* Fixed issue #19: Add NSIS as a prerequisite in README and INSTALL
* Fixed issue #20: Modify how 'override' argument is implemented
* Fixed issue #21: Add a reference to source code location in generated files.
* Fixed issue #22: Modify IGenerator interface to use setters/getters.
* Fixed issue #23: Create a new interface for abstracting the string literal encoding format


Changes for 1.4:

* New feature: Now encoding binary using c++ control characters. Reduces the size of the output.
* Fixed issue  #1: Update README file
* Fixed issue  #3: Make File class const in header generated files.
* Fixed issue  #4: Remove absolute path from include statement in cpp generated code
* Fixed issue  #5: Remove the concept of segment in the interface
* Fixed issue  #7: Optimize carriage return text
* Fixed issue  #8: Store binary data as HEX or OCT
* Fixed issue #10: Move test file generation script to output dir
* Fixed issue #11: Define googletest API as a git submodule
* Fixed issue #12: Fix failling test: TestExtraction.testRandom3()
* Fixed issue #13: bin2cpp crashes when encoding a generated file with size=1000 fill=random seed=1


Changes for 1.3.40:

* Improvement: Changed the alignment of output code.
* Improvement: Modified installer script for clarity.
* Bug/warning fixes.


Changes for 1.3.29:

* First public release.
* Code originally release at http://www.end2endzone.com/bin2cpp-the-easiest-way-to-embed-small-files-into-a-c-executable/
* New feature: Easily converts small files as C++ source code for embedding into a C++ executable.
* New feature: Content extraction supported by a unique function call for each embedded file.
* New feature: Supports multiple embedded files at once.
* New feature: Makes it harder for resource hacker to modify or steal the embedded files.
* New feature: No third party libraries required for retrieving the data of the embedded files.
